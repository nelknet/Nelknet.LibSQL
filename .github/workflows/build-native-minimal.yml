name: Build Native Libraries (Minimal)

on:
  workflow_dispatch:
    inputs:
      libsql_tag:
        description: 'libSQL repository ref to build (e.g. main, v0.4.6)'
        required: true
        default: 'main'

jobs:
  # Build on native architecture for each OS
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Nelknet.LibSQL
        uses: actions/checkout@v4

      - name: Checkout libSQL
        uses: actions/checkout@v4
        with:
          repository: tursodatabase/libsql
          ref: ${{ github.event.inputs.libsql_tag }}
          path: libsql

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build libSQL C bindings
        working-directory: libsql/bindings/c
        run: cargo build --release

      - name: Create shared library
        run: |
          mkdir -p runtimes/linux-x64/native
          cd libsql/target/release
          # Extract all object files and create shared library
          ar -x libsql_experimental.a
          gcc -shared -o libsql.so *.o -lpthread -ldl -lm
          cp libsql.so ../../../runtimes/linux-x64/native/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: libsql-linux-x64
          path: runtimes/linux-x64/native/libsql.so

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout Nelknet.LibSQL
        uses: actions/checkout@v4

      - name: Checkout libSQL
        uses: actions/checkout@v4
        with:
          repository: tursodatabase/libsql
          ref: ${{ github.event.inputs.libsql_tag }}
          path: libsql

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build libSQL C bindings
        working-directory: libsql/bindings/c
        run: cargo build --release

      - name: Create DLL
        shell: pwsh
        run: |
          # Create output directory
          New-Item -ItemType Directory -Force -Path "runtimes\win-x64\native"
          
          # Extract objects and create DLL
          cd libsql\target\release
          lib /list libsql_experimental.lib | Out-File -FilePath objects.txt
          
          # Extract each object file
          Get-Content objects.txt | ForEach-Object {
            if ($_ -match '\.o$') {
              lib /extract:$_ libsql_experimental.lib
            }
          }
          
          # Link into DLL
          link /dll /out:libsql.dll *.obj advapi32.lib bcrypt.lib kernel32.lib userenv.lib ws2_32.lib msvcrt.lib
          
          # Copy to output
          Copy-Item libsql.dll ..\..\..\runtimes\win-x64\native\

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: libsql-win-x64
          path: runtimes/win-x64/native/libsql.dll

  build-macos:
    runs-on: macos-latest  # This is ARM64 (M1)
    steps:
      - name: Checkout Nelknet.LibSQL
        uses: actions/checkout@v4

      - name: Checkout libSQL
        uses: actions/checkout@v4
        with:
          repository: tursodatabase/libsql
          ref: ${{ github.event.inputs.libsql_tag }}
          path: libsql

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Build libSQL C bindings
        working-directory: libsql/bindings/c
        run: cargo build --release

      - name: Create dylib
        run: |
          mkdir -p runtimes/osx-arm64/native
          cd libsql/target/release
          # Extract all object files and create dynamic library
          ar -x libsql_experimental.a
          clang -dynamiclib -o libsql.dylib *.o \
            -framework Security -framework CoreFoundation \
            -lSystem -lc -lm
          cp libsql.dylib ../../../runtimes/osx-arm64/native/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: libsql-osx-arm64
          path: runtimes/osx-arm64/native/libsql.dylib

  commit-libraries:
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Organize libraries
        run: |
          # Copy all libraries to the correct location
          mkdir -p src/Nelknet.LibSQL.Bindings/runtimes
          cp -r artifacts/libsql-linux-x64/runtimes/* src/Nelknet.LibSQL.Bindings/runtimes/
          cp -r artifacts/libsql-win-x64/runtimes/* src/Nelknet.LibSQL.Bindings/runtimes/
          cp -r artifacts/libsql-osx-arm64/runtimes/* src/Nelknet.LibSQL.Bindings/runtimes/
          
          # Also copy the header file from libSQL
          mkdir -p temp
          cd temp
          git clone --depth 1 --branch ${{ github.event.inputs.libsql_tag }} https://github.com/tursodatabase/libsql.git
          cp libsql/bindings/c/include/libsql.h ../src/Nelknet.LibSQL.Bindings/
          cd ..
          rm -rf temp
          
          # Create version file
          echo "${{ github.event.inputs.libsql_tag }}" > src/Nelknet.LibSQL.Bindings/runtimes/LIBSQL_VERSION
          
          # Show what we have
          echo "Native libraries built:"
          find src/Nelknet.LibSQL.Bindings/runtimes -name "libsql.*" -type f
          ls -la src/Nelknet.LibSQL.Bindings/runtimes/linux-x64/native/
          ls -la src/Nelknet.LibSQL.Bindings/runtimes/win-x64/native/
          ls -la src/Nelknet.LibSQL.Bindings/runtimes/osx-arm64/native/

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          commit-message: "chore: Add native libSQL libraries (Linux x64, Windows x64, macOS ARM64)"
          title: "Add native libSQL libraries"
          body: |
            This PR adds the native libSQL libraries built from `${{ github.event.inputs.libsql_tag }}`.
            
            Libraries included:
            - Linux x64: `libsql.so`
            - Windows x64: `libsql.dll`
            - macOS ARM64: `libsql.dylib`
            
            This is the minimal set needed to support the most common development and CI platforms.
          branch: add-native-libs-${{ github.event.inputs.libsql_tag }}
          delete-branch: true