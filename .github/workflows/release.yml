name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (without v prefix, e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        default: false
        type: boolean

jobs:
  validate-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "push" ]]; then
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          # Use manual input
          VERSION="${{ inputs.version }}"
        fi
        
        # Validate version format
        if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "‚ùå Invalid version format: $VERSION"
          echo "Version must be in format: MAJOR.MINOR.PATCH or MAJOR.MINOR.PATCH-PRERELEASE"
          exit 1
        fi
        
        # Determine if prerelease
        if [[ "$VERSION" =~ -[a-zA-Z0-9]+$ ]] || [[ "${{ inputs.prerelease }}" == "true" ]]; then
          IS_PRERELEASE=true
        else
          IS_PRERELEASE=false
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        echo "üì¶ Version: $VERSION (prerelease: $IS_PRERELEASE)"
    
    - name: Check CHANGELOG
      run: |
        # Check if version exists in CHANGELOG
        if ! grep -q "\[${{ steps.version.outputs.version }}\]" CHANGELOG.md; then
          echo "‚ùå Version ${{ steps.version.outputs.version }} not found in CHANGELOG.md"
          echo "Please update CHANGELOG.md before releasing"
          exit 1
        fi
        echo "‚úÖ Version found in CHANGELOG.md"
    
    - name: Check project versions
      run: |
        # Extract version from Directory.Build.props
        VERSION_PREFIX=$(grep -oP '(?<=<VersionPrefix>)[^<]+' Directory.Build.props)
        VERSION_SUFFIX=$(grep -oP '(?<=<VersionSuffix>)[^<]+' Directory.Build.props || echo "")
        
        if [ -n "$VERSION_SUFFIX" ]; then
          PROJECT_VERSION="$VERSION_PREFIX-$VERSION_SUFFIX"
        else
          PROJECT_VERSION="$VERSION_PREFIX"
        fi
        
        if [ "$PROJECT_VERSION" != "${{ steps.version.outputs.version }}" ]; then
          echo "‚ùå Version mismatch!"
          echo "Directory.Build.props version: $PROJECT_VERSION"
          echo "Release version: ${{ steps.version.outputs.version }}"
          echo "Please update Directory.Build.props before releasing"
          exit 1
        fi
        echo "‚úÖ Project version matches release version"
  
  create-release:
    needs: validate-version
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Extract release notes
      id: extract_notes
      run: |
        # Extract release notes for this version from CHANGELOG.md
        VERSION="${{ needs.validate-version.outputs.version }}"
        
        # Find the section for this version and extract until the next version or end
        awk -v ver="[$VERSION]" '
          $0 ~ ver { flag=1; next }
          flag && /^## \[/ { exit }
          flag { print }
        ' CHANGELOG.md > release_notes.md
        
        # Add installation instructions
        echo "" >> release_notes.md
        echo "## üì¶ Installation" >> release_notes.md
        echo "" >> release_notes.md
        echo '```bash' >> release_notes.md
        echo "dotnet add package Nelknet.LibSQL.Data --version $VERSION" >> release_notes.md
        echo '```' >> release_notes.md
        echo "" >> release_notes.md
        echo "## üîó NuGet Packages" >> release_notes.md
        echo "- [Nelknet.LibSQL.Data](https://www.nuget.org/packages/Nelknet.LibSQL.Data/$VERSION)" >> release_notes.md
        echo "- [Nelknet.LibSQL.Bindings](https://www.nuget.org/packages/Nelknet.LibSQL.Bindings/$VERSION)" >> release_notes.md
    
    - name: Create GitHub Release
      id: create_release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.validate-version.outputs.version }}
        name: v${{ needs.validate-version.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: ${{ needs.validate-version.outputs.is_prerelease }}
        token: ${{ secrets.GITHUB_TOKEN }}
  
  publish-nuget:
    needs: [validate-version, create-release]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Pack NuGet packages
      run: |
        VERSION="${{ needs.validate-version.outputs.version }}"
        
        # Pack with the specific version
        dotnet pack src/Nelknet.LibSQL.Bindings/Nelknet.LibSQL.Bindings.csproj \
          --configuration Release \
          -p:PackageVersion=$VERSION \
          --output ./artifacts
        
        dotnet pack src/Nelknet.LibSQL.Data/Nelknet.LibSQL.Data.csproj \
          --configuration Release \
          -p:PackageVersion=$VERSION \
          --output ./artifacts
    
    - name: Upload packages to release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ needs.validate-version.outputs.version }}
        files: |
          artifacts/*.nupkg
          artifacts/*.snupkg
    
    - name: Push to NuGet
      run: |
        # Push all packages
        for package in artifacts/*.nupkg; do
          # Skip symbol packages
          if [[ "$package" != *.snupkg ]]; then
            echo "üì¶ Pushing $package to NuGet..."
            dotnet nuget push "$package" \
              --api-key ${{ secrets.NUGET_API_KEY }} \
              --source https://api.nuget.org/v3/index.json \
              --skip-duplicate
          fi
        done
    
    - name: Create version tag if manual
      if: github.event_name == 'workflow_dispatch'
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        VERSION="${{ needs.validate-version.outputs.version }}"
        git tag -a "v$VERSION" -m "Release v$VERSION"
        git push origin "v$VERSION"
  
  update-changelog:
    needs: [validate-version, publish-nuget]
    if: success()
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Update CHANGELOG for next version
      run: |
        # Add new Unreleased section at the top
        TEMP_FILE=$(mktemp)
        VERSION="${{ needs.validate-version.outputs.version }}"
        DATE=$(date +%Y-%m-%d)
        
        # Update the released version with date
        sed -i "s/## \[$VERSION\]/## [$VERSION] - $DATE/" CHANGELOG.md
        
        # Add new Unreleased section
        {
          echo "# Changelog"
          echo ""
          echo "All notable changes to this project will be documented in this file."
          echo ""
          echo "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),"
          echo "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)."
          echo ""
          echo "## [Unreleased]"
          echo ""
          echo "### Added"
          echo ""
          echo "### Changed"
          echo ""
          echo "### Deprecated"
          echo ""
          echo "### Removed"
          echo ""
          echo "### Fixed"
          echo ""
          echo "### Security"
          echo ""
        } > $TEMP_FILE
        # Append the rest of the changelog
        tail -n +7 CHANGELOG.md >> $TEMP_FILE
        mv $TEMP_FILE CHANGELOG.md
    
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: 'chore: prepare CHANGELOG for next release'
        title: 'chore: prepare CHANGELOG for next release'
        body: |
          This PR prepares the CHANGELOG for the next release by:
          - Adding release date to v${{ needs.validate-version.outputs.version }}
          - Creating new Unreleased section
          
          This is an automated PR created after the release of v${{ needs.validate-version.outputs.version }}.
        branch: chore/prepare-changelog-${{ needs.validate-version.outputs.version }}
        delete-branch: true