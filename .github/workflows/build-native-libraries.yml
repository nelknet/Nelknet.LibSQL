name: Build Native Libraries

on:
  workflow_dispatch:
    inputs:
      libsql_ref:
        description: 'libSQL ref to build (branch, tag, or commit)'
        required: true
        default: 'main'

jobs:
  build-native:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            output: linux-x64
            ext: so
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            output: win-x64
            ext: dll
          - os: macos-latest
            target: aarch64-apple-darwin
            output: osx-arm64
            ext: dylib
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Checkout libSQL
      uses: actions/checkout@v4
      with:
        repository: tursodatabase/libsql
        ref: ${{ github.event.inputs.libsql_ref }}
        path: libsql
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    
    - name: Build libSQL
      working-directory: libsql/bindings/c
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Create shared library (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd libsql/target/${{ matrix.target }}/release
        ar -x libsql_experimental.a
        gcc -shared -o libsql.so *.o -lpthread -ldl -lm
        mkdir -p ${{ github.workspace }}/artifacts/${{ matrix.output }}/native
        cp libsql.so ${{ github.workspace }}/artifacts/${{ matrix.output }}/native/
    
    - name: Create shared library (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        cd libsql\target\${{ matrix.target }}\release
        
        REM Find Visual Studio
        for /f "usebackq tokens=*" %%i in (`"%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath`) do set VS_PATH=%%i
        call "%VS_PATH%\VC\Auxiliary\Build\vcvars64.bat"
        
        REM Check what files we have
        echo Available files:
        dir *.lib *.a 2>nul
        
        REM Create a simple Rust cdylib that links the static library
        mkdir dll_wrapper
        cd dll_wrapper
        
        REM Create Cargo.toml
        echo [package] > Cargo.toml
        echo name = "libsql_dll" >> Cargo.toml
        echo version = "0.1.0" >> Cargo.toml
        echo edition = "2021" >> Cargo.toml
        echo. >> Cargo.toml
        echo [lib] >> Cargo.toml
        echo crate-type = ["cdylib"] >> Cargo.toml
        echo name = "libsql" >> Cargo.toml
        echo. >> Cargo.toml
        echo [dependencies] >> Cargo.toml
        
        REM Create build.rs
        echo fn main() { > build.rs
        echo     println!("cargo:rustc-link-search=native=.."); >> build.rs
        echo     println!("cargo:rustc-link-lib=static=sql_experimental"); >> build.rs
        echo     println!("cargo:rustc-link-lib=dylib=ws2_32"); >> build.rs
        echo     println!("cargo:rustc-link-lib=dylib=advapi32"); >> build.rs
        echo     println!("cargo:rustc-link-lib=dylib=userenv"); >> build.rs
        echo     println!("cargo:rustc-link-lib=dylib=bcrypt"); >> build.rs
        echo     println!("cargo:rustc-link-lib=dylib=ntdll"); >> build.rs
        echo     println!("cargo:rustc-link-lib=dylib=crypt32"); >> build.rs
        echo     println!("cargo:rustc-link-lib=dylib=secur32"); >> build.rs
        echo     println!("cargo:rustc-link-lib=dylib=kernel32"); >> build.rs
        echo     println!("cargo:rustc-link-lib=dylib=ole32"); >> build.rs
        echo     println!("cargo:rustc-link-lib=dylib=oleaut32"); >> build.rs
        echo     println!("cargo:rustc-link-lib=dylib=uuid"); >> build.rs
        echo     println!("cargo:rustc-link-lib=dylib=ncrypt"); >> build.rs
        echo } >> build.rs
        
        REM Create minimal lib.rs
        mkdir src
        echo // Empty - symbols come from static lib > src\lib.rs
        echo #![allow(non_snake_case)] >> src\lib.rs
        
        REM Build the DLL
        cargo build --release --target ${{ matrix.target }}
        
        REM Copy the DLL
        copy target\${{ matrix.target }}\release\libsql.dll ..\..\libsql.dll
        cd ..\..
        
        mkdir "${{ github.workspace }}\artifacts\${{ matrix.output }}\native"
        copy libsql.dll "${{ github.workspace }}\artifacts\${{ matrix.output }}\native\"
    
    - name: Create shared library (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cd libsql/target/${{ matrix.target }}/release
        ar -x libsql_experimental.a
        # Build dynamic library
        clang -dynamiclib -o libsql.dylib *.o \
          -framework Security -framework CoreFoundation \
          -lSystem -lc -lm
        # Verify library was created
        echo "Library created:"
        ls -lh libsql.dylib
        file libsql.dylib
        mkdir -p ${{ github.workspace }}/artifacts/${{ matrix.output }}/native
        cp libsql.dylib ${{ github.workspace }}/artifacts/${{ matrix.output }}/native/
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: libsql-${{ matrix.output }}
        path: artifacts/${{ matrix.output }}/native/libsql.${{ matrix.ext }}
  
  commit-libraries:
    needs: build-native
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Copy libraries to project
      run: |
        # Create directories
        mkdir -p src/Nelknet.LibSQL.Bindings/runtimes/linux-x64/native
        mkdir -p src/Nelknet.LibSQL.Bindings/runtimes/win-x64/native
        mkdir -p src/Nelknet.LibSQL.Bindings/runtimes/osx-arm64/native
        
        # Copy libraries
        cp artifacts/libsql-linux-x64/libsql.so src/Nelknet.LibSQL.Bindings/runtimes/linux-x64/native/
        cp artifacts/libsql-win-x64/libsql.dll src/Nelknet.LibSQL.Bindings/runtimes/win-x64/native/
        cp artifacts/libsql-osx-arm64/libsql.dylib src/Nelknet.LibSQL.Bindings/runtimes/osx-arm64/native/
        
        # Create version file
        echo "Built from libSQL ref: ${{ github.event.inputs.libsql_ref }}" > src/Nelknet.LibSQL.Bindings/runtimes/LIBSQL_VERSION
        echo "Built on: $(date)" >> src/Nelknet.LibSQL.Bindings/runtimes/LIBSQL_VERSION
        
        # Show what we built
        ls -lh src/Nelknet.LibSQL.Bindings/runtimes/*/native/*
    
    - name: Commit and push
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        git add src/Nelknet.LibSQL.Bindings/runtimes/
        git commit -m "chore: Update native libSQL libraries from ${{ github.event.inputs.libsql_ref }}"
        git push