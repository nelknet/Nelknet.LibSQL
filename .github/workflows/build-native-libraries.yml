name: Build Native Libraries

on:
  workflow_dispatch:
    inputs:
      libsql_ref:
        description: 'libSQL ref to build (branch, tag, or commit)'
        required: true
        default: 'main'

jobs:
  build-native:
    outputs:
      commit_sha: ${{ steps.version_info.outputs.commit_sha }}
      tag_name: ${{ steps.version_info.outputs.tag_name }}
      cargo_version: ${{ steps.version_info.outputs.cargo_version }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            output: linux-x64
            ext: so
          - os: ubuntu-latest
            target: x86_64-pc-windows-gnu
            output: win-x64
            ext: dll
            is_cross: true
          - os: macos-latest
            target: aarch64-apple-darwin
            output: osx-arm64
            ext: dylib
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Checkout libSQL
      uses: actions/checkout@v4
      with:
        repository: tursodatabase/libsql
        ref: ${{ github.event.inputs.libsql_ref }}
        path: libsql
    
    - name: Get libSQL version info
      id: version_info
      run: |
        cd libsql
        # Get the commit SHA
        COMMIT_SHA=$(git rev-parse HEAD)
        echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
        
        # Get the exact ref (tag or branch)
        REF_NAME="${{ github.event.inputs.libsql_ref }}"
        echo "ref_name=$REF_NAME" >> $GITHUB_OUTPUT
        
        # Try to get the latest tag if we're on a branch
        if git describe --exact-match --tags HEAD 2>/dev/null; then
          TAG_NAME=$(git describe --exact-match --tags HEAD)
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        else
          # Get the latest tag that's an ancestor of this commit
          TAG_NAME=$(git describe --tags --abbrev=0 HEAD 2>/dev/null || echo "no-tag")
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        fi
        
        # Get version from Cargo.toml if it exists
        if [ -f "Cargo.toml" ]; then
          CARGO_VERSION=$(grep '^version' Cargo.toml | head -1 | cut -d'"' -f2)
          echo "cargo_version=$CARGO_VERSION" >> $GITHUB_OUTPUT
        fi
    
    - name: Install MinGW for cross-compilation
      if: matrix.is_cross == true
      run: |
        sudo apt-get update
        sudo apt-get install -y mingw-w64 cmake
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Add Rust target
      run: rustup target add ${{ matrix.target }}
    
    - name: Build libSQL
      working-directory: libsql/bindings/c
      run: |
        # Remove rust-toolchain.toml files to prevent version conflicts
        rm -f rust-toolchain.toml ../../rust-toolchain.toml
        
        # For Windows cross-compilation, set environment variables
        if [ "${{ matrix.target }}" = "x86_64-pc-windows-gnu" ]; then
          export CC_x86_64_pc_windows_gnu=x86_64-w64-mingw32-gcc
          export AR_x86_64_pc_windows_gnu=x86_64-w64-mingw32-ar
          export CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER=x86_64-w64-mingw32-gcc
        fi
        
        # Build with vendored SQLite
        LIBSQLITE3_FLAGS="-DSQLITE_ENABLE_COLUMN_METADATA" LIBSQL_BUNDLED=1 cargo build --release --target ${{ matrix.target }}
    
    - name: Create shared library (Linux)
      if: matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu'
      run: |
        cd libsql/target/${{ matrix.target }}/release
        ar -x libsql_experimental.a
        gcc -shared -o libsql.so *.o -lpthread -ldl -lm
        mkdir -p ${{ github.workspace }}/artifacts/${{ matrix.output }}/native
        cp libsql.so ${{ github.workspace }}/artifacts/${{ matrix.output }}/native/
    
    - name: Create shared library (Windows)
      if: matrix.target == 'x86_64-pc-windows-gnu'
      run: |
        cd libsql/target/${{ matrix.target }}/release
        
        # Extract main library
        ar -x libsql_experimental.a
        
        # Extract vendored SQLite library
        SQLITE_LIB=$(find ./build -name "libsqlite3mc_static.a" -type f | head -1)
        if [ -n "$SQLITE_LIB" ]; then
          ar -x "$SQLITE_LIB"
        fi
        
        # Handle sqlite3mc object file naming
        if [ -f sqlite3mc.c.obj ]; then
          mv sqlite3mc.c.obj sqlite3mc.c.o
        fi
        
        # Create DLL with all symbols
        x86_64-w64-mingw32-gcc -shared -o libsql.dll \
          -Wl,--whole-archive *.o -Wl,--no-whole-archive \
          -Wl,--export-all-symbols \
          -lws2_32 -ladvapi32 -luserenv -lbcrypt -lntdll -lcrypt32 \
          -lsecur32 -lkernel32 -lole32 -loleaut32 -luuid -lncrypt \
          -static-libgcc
        
        # Verify and copy
        ls -lh libsql.dll
        mkdir -p ${{ github.workspace }}/artifacts/${{ matrix.output }}/native
        cp libsql.dll ${{ github.workspace }}/artifacts/${{ matrix.output }}/native/
    
    - name: Create shared library (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cd libsql/target/${{ matrix.target }}/release
        ar -x libsql_experimental.a
        clang -dynamiclib -o libsql.dylib *.o \
          -framework Security -framework CoreFoundation \
          -lSystem -lc -lm
        ls -lh libsql.dylib
        mkdir -p ${{ github.workspace }}/artifacts/${{ matrix.output }}/native
        cp libsql.dylib ${{ github.workspace }}/artifacts/${{ matrix.output }}/native/
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: libsql-${{ matrix.output }}
        path: artifacts/${{ matrix.output }}/native/libsql.${{ matrix.ext }}
    
    - name: Save version info
      if: matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu'
      run: |
        mkdir -p version-info
        cat > version-info/version.env << EOF
        COMMIT_SHA=${{ steps.version_info.outputs.commit_sha }}
        TAG_NAME=${{ steps.version_info.outputs.tag_name }}
        CARGO_VERSION=${{ steps.version_info.outputs.cargo_version }}
        EOF
    
    - name: Upload version info
      if: matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu'
      uses: actions/upload-artifact@v4
      with:
        name: version-info
        path: version-info/version.env
  
  commit-libraries:
    needs: build-native
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Download version info artifact
      uses: actions/download-artifact@v4
      with:
        name: version-info
        path: version-info
    
    - name: Read version info
      id: read_version
      run: |
        # Read the version info from the artifact
        source version-info/version.env
        echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "cargo_version=$CARGO_VERSION" >> $GITHUB_OUTPUT
    
    - name: Copy libraries to project
      run: |
        # Create directories
        mkdir -p src/Nelknet.LibSQL.Bindings/runtimes/linux-x64/native
        mkdir -p src/Nelknet.LibSQL.Bindings/runtimes/win-x64/native
        mkdir -p src/Nelknet.LibSQL.Bindings/runtimes/osx-arm64/native
        
        # Copy libraries
        cp artifacts/libsql-linux-x64/libsql.so src/Nelknet.LibSQL.Bindings/runtimes/linux-x64/native/
        cp artifacts/libsql-win-x64/libsql.dll src/Nelknet.LibSQL.Bindings/runtimes/win-x64/native/
        cp artifacts/libsql-osx-arm64/libsql.dylib src/Nelknet.LibSQL.Bindings/runtimes/osx-arm64/native/
        
        # Create version file with detailed information
        cat > src/Nelknet.LibSQL.Bindings/runtimes/LIBSQL_VERSION << EOF
libSQL Reference: ${{ github.event.inputs.libsql_ref }}
libSQL Commit: ${{ steps.read_version.outputs.commit_sha }}
libSQL Tag: ${{ steps.read_version.outputs.tag_name }}
libSQL Cargo Version: ${{ steps.read_version.outputs.cargo_version }}
Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
Build Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
EOF
        
        # Show what we built
        ls -lh src/Nelknet.LibSQL.Bindings/runtimes/*/native/*
    
    - name: Commit and push
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        git add src/Nelknet.LibSQL.Bindings/runtimes/
        git commit -m "chore: Update native libSQL libraries from ${{ github.event.inputs.libsql_ref }}"
        git push