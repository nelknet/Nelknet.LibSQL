name: Build Native Libraries

on:
  workflow_dispatch:
    inputs:
      libsql_ref:
        description: 'libSQL ref to build (branch, tag, or commit)'
        required: true
        default: 'main'

jobs:
  build-native:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            output: linux-x64
            ext: so
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            output: win-x64
            ext: dll
          - os: macos-latest
            target: aarch64-apple-darwin
            output: osx-arm64
            ext: dylib
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Checkout libSQL
      uses: actions/checkout@v4
      with:
        repository: tursodatabase/libsql
        ref: ${{ github.event.inputs.libsql_ref }}
        path: libsql
    
    - name: Setup MSYS2 for Windows
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: mingw-w64-x86_64-toolchain mingw-w64-x86_64-rust gcc make base-devel
        msystem: mingw64
        path-type: inherit
    
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Build libSQL
      working-directory: libsql/bindings/c
      shell: ${{ matrix.os == 'windows-latest' && 'msys2 {0}' || 'bash' }}
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Create shared library (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd libsql/target/${{ matrix.target }}/release
        ar -x libsql_experimental.a
        gcc -shared -o libsql.so *.o -lpthread -ldl -lm
        mkdir -p ${{ github.workspace }}/artifacts/${{ matrix.output }}/native
        cp libsql.so ${{ github.workspace }}/artifacts/${{ matrix.output }}/native/
    
    - name: Create shared library (Windows)
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        cd libsql/target/${{ matrix.target }}/release
        # Extract object files and create DLL
        ar -x libsql_experimental.a
        gcc -shared -o libsql.dll *.o \
          -Wl,--export-all-symbols \
          -lws2_32 -ladvapi32 -luserenv -lbcrypt -lntdll -lcrypt32 \
          -lsecur32 -lkernel32 -lole32 -loleaut32 -luuid -lncrypt \
          -static-libgcc
        
        # Clean up object files
        rm *.o
        
        mkdir -p ${{ github.workspace }}/artifacts/${{ matrix.output }}/native
        cp libsql.dll ${{ github.workspace }}/artifacts/${{ matrix.output }}/native/
    
    - name: Create shared library (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cd libsql/target/${{ matrix.target }}/release
        ar -x libsql_experimental.a
        # Build dynamic library
        clang -dynamiclib -o libsql.dylib *.o \
          -framework Security -framework CoreFoundation \
          -lSystem -lc -lm
        # Verify library was created
        echo "Library created:"
        ls -lh libsql.dylib
        file libsql.dylib
        mkdir -p ${{ github.workspace }}/artifacts/${{ matrix.output }}/native
        cp libsql.dylib ${{ github.workspace }}/artifacts/${{ matrix.output }}/native/
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: libsql-${{ matrix.output }}
        path: artifacts/${{ matrix.output }}/native/libsql.${{ matrix.ext }}
  
  commit-libraries:
    needs: build-native
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Copy libraries to project
      run: |
        # Create directories
        mkdir -p src/Nelknet.LibSQL.Bindings/runtimes/linux-x64/native
        mkdir -p src/Nelknet.LibSQL.Bindings/runtimes/win-x64/native
        mkdir -p src/Nelknet.LibSQL.Bindings/runtimes/osx-arm64/native
        
        # Copy libraries
        cp artifacts/libsql-linux-x64/libsql.so src/Nelknet.LibSQL.Bindings/runtimes/linux-x64/native/
        cp artifacts/libsql-win-x64/libsql.dll src/Nelknet.LibSQL.Bindings/runtimes/win-x64/native/
        cp artifacts/libsql-osx-arm64/libsql.dylib src/Nelknet.LibSQL.Bindings/runtimes/osx-arm64/native/
        
        # Create version file
        echo "Built from libSQL ref: ${{ github.event.inputs.libsql_ref }}" > src/Nelknet.LibSQL.Bindings/runtimes/LIBSQL_VERSION
        echo "Built on: $(date)" >> src/Nelknet.LibSQL.Bindings/runtimes/LIBSQL_VERSION
        
        # Show what we built
        ls -lh src/Nelknet.LibSQL.Bindings/runtimes/*/native/*
    
    - name: Commit and push
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'
        
        git add src/Nelknet.LibSQL.Bindings/runtimes/
        git commit -m "chore: Update native libSQL libraries from ${{ github.event.inputs.libsql_ref }}"
        git push