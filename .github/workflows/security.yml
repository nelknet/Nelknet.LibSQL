name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan weekly on Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        queries: security-and-quality

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  dependency-check:
    name: Dependency Security Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore

    # Check for known vulnerabilities in dependencies
    - name: Run dotnet vulnerability check
      run: |
        dotnet list package --vulnerable --include-transitive
        
        # Check if any vulnerable packages were found
        if dotnet list package --vulnerable --include-transitive | grep -q "has the following vulnerable packages"; then
          echo "::error::Vulnerable packages found!"
          exit 1
        fi

  secrets-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || github.event.before }}
        head: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.event.after }}
        extra_args: --debug --only-verified

  license-check:
    name: License Compatibility Check
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Install license scanner
      run: dotnet tool install --global dotnet-project-licenses

    - name: Restore dependencies
      run: dotnet restore

    - name: Check licenses
      run: |
        dotnet-project-licenses -i . -o -f markdown > licenses.md
        
        # Check for problematic licenses
        if grep -iE "(GPL|AGPL|LGPL|CC-BY-SA)" licenses.md; then
          echo "::warning::Potentially incompatible licenses found. Please review."
        fi
        
        # Upload license report
        echo "## License Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        cat licenses.md >> $GITHUB_STEP_SUMMARY

  sbom:
    name: Generate Software Bill of Materials
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Install SBOM tool
      run: dotnet tool install --global Microsoft.Sbom.DotNetTool

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration Release

    - name: Generate SBOM
      run: |
        sbom-tool generate \
          -b . \
          -bc "dotnet build --configuration Release" \
          -pn "Nelknet.LibSQL" \
          -pv "${{ github.sha }}" \
          -ps "Nelknet" \
          -nsb https://github.com/${{ github.repository }} \
          -m .

    - name: Upload SBOM
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: _manifest/
        retention-days: 30