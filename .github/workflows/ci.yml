name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace}}/nuget

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            os_name: linux
          - os: windows-latest
            os_name: windows
          - os: macos-latest
            os_name: macos

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Needed for GitVersion

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          8.0.x
          9.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Test
      run: dotnet test --no-build --configuration Release --verbosity normal --logger trx --results-directory "TestResults-${{ matrix.os_name }}"

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os_name }}
        path: TestResults-${{ matrix.os_name }}
        retention-days: 7

    - name: Upload dotnet test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: .NET Tests (${{ matrix.os_name }})
        path: "TestResults-${{ matrix.os_name }}/*.trx"
        reporter: dotnet-trx
        fail-on-error: true

    # Pack the NuGet packages on Linux only to avoid duplication
    - name: Pack NuGet packages
      if: matrix.os == 'ubuntu-latest'
      run: |
        dotnet pack src/Nelknet.LibSQL.Bindings --configuration Release --output ${{ env.NuGetDirectory }}
        dotnet pack src/Nelknet.LibSQL.Data --configuration Release --output ${{ env.NuGetDirectory }}

    - name: Upload NuGet packages
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: nuget
        path: ${{ env.NuGetDirectory }}
        retention-days: 7

  validate_nuget:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - uses: actions/download-artifact@v4
      with:
        name: nuget
        path: ${{ env.NuGetDirectory }}

    - name: Install NuGet validator
      run: dotnet tool install Meziantou.Framework.NuGetPackageValidation.Tool --global

    # Validate NuGet packages meet quality standards
    - name: Validate NuGet packages
      shell: pwsh
      run: |
        $packages = Get-ChildItem "${{ env.NuGetDirectory }}" -Filter "*.nupkg" | Where-Object { $_.Name -notlike "*.symbols.nupkg" -and $_.Name -notlike "*.snupkg" }
        
        $exitCode = 0
        foreach ($package in $packages) {
          Write-Host "Validating $($package.Name)..."
          
          # Run validation
          meziantou.validate-nuget-package $package.FullName
          
          if ($LASTEXITCODE -ne 0) {
            $exitCode = $LASTEXITCODE
            Write-Error "Validation failed for $($package.Name)"
          }
        }
        
        exit $exitCode

  run_integration_tests:
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            os_name: linux
          - os: windows-latest
            os_name: windows
          - os: macos-latest
            os_name: macos
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - uses: actions/download-artifact@v4
      with:
        name: nuget
        path: ${{ env.NuGetDirectory }}

    - name: Test Package Installation
      run: |
        # Create a test project
        dotnet new console -n TestPackageInstall
        cd TestPackageInstall
        
        # Add local NuGet source
        dotnet nuget add source "${{ env.NuGetDirectory }}" --name local-packages
        
        # Install the package
        dotnet add package Nelknet.LibSQL.Data --prerelease
        
        # Create a simple test program
        cat > Program.cs << 'EOF'
        using Nelknet.LibSQL.Data;
        
        using var connection = new LibSQLConnection("Data Source=:memory:");
        connection.Open();
        
        using var cmd = connection.CreateCommand();
        cmd.CommandText = "SELECT 1 as test";
        var result = cmd.ExecuteScalar();
        
        Console.WriteLine($"Test result: {result}");
        
        if (result?.ToString() == "1")
        {
            Console.WriteLine("Package installation test passed!");
            return 0;
        }
        else
        {
            Console.WriteLine("Package installation test failed!");
            return 1;
        }
        EOF
        
        # Build and run
        dotnet build
        dotnet run

  publish_dev:
    runs-on: ubuntu-latest
    needs: [validate_nuget, run_integration_tests]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - uses: actions/download-artifact@v4
      with:
        name: nuget
        path: ${{ env.NuGetDirectory }}

    # Publish to GitHub Packages
    - name: Publish to GitHub Packages
      run: |
        dotnet nuget push "${{ env.NuGetDirectory }}/*.nupkg" \
          --api-key ${{ secrets.GITHUB_TOKEN }} \
          --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json \
          --skip-duplicate