name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Check if CHANGELOG.md was updated for PRs (except for certain labels)
  changelog-check:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check if CHANGELOG.md was updated
      run: |
        # Skip check if PR has certain labels
        if [[ "${{ contains(github.event.pull_request.labels.*.name, 'skip-changelog') }}" == "true" ]] || \
           [[ "${{ contains(github.event.pull_request.labels.*.name, 'dependencies') }}" == "true" ]] || \
           [[ "${{ contains(github.event.pull_request.labels.*.name, 'documentation') }}" == "true" ]]; then
          echo "Skipping changelog check due to label"
          exit 0
        fi
        
        # Check if CHANGELOG.md was modified
        if git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -q "CHANGELOG.md"; then
          echo "✅ CHANGELOG.md was updated"
        else
          echo "❌ CHANGELOG.md must be updated for this PR"
          echo "Add a 'skip-changelog' label if this change doesn't require a changelog entry"
          exit 1
        fi

  build-and-test:
    needs: [changelog-check]
    if: always() && (needs.changelog-check.result == 'success' || needs.changelog-check.result == 'skipped')
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    # Debug: Check if native libraries are present after build (Unix)
    - name: Check native libraries (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "Checking for native libraries..."
        find . -name "libsql.so" -o -name "libsql.dll" -o -name "libsql.dylib" | head -20
        echo "Test output directory contents:"
        ls -la tests/Nelknet.LibSQL.Tests/bin/Release/net8.0/runtimes/ || echo "Runtime directory not found"
    
    # Debug: Check if native libraries are present after build (Windows)
    - name: Check native libraries (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "Checking for native libraries..."
        Get-ChildItem -Recurse -Filter "libsql.dll" | Select-Object -First 20
        echo "Test output directory contents:"
        if (Test-Path "tests\Nelknet.LibSQL.Tests\bin\Release\net8.0\runtimes\") {
          Get-ChildItem "tests\Nelknet.LibSQL.Tests\bin\Release\net8.0\runtimes\" -Recurse
        } else {
          echo "Runtime directory not found"
        }
    
    # Start sqld server for remote integration tests (Linux only)
    - name: Start sqld server
      if: runner.os == 'Linux'
      run: |
        docker compose up -d sqld
        # Wait for sqld to be ready by checking if it responds to requests
        count=0
        while ! curl -s http://localhost:8080/v2 >/dev/null 2>&1; do
          echo "Waiting for sqld to respond..."
          sleep 2
          count=$((count + 1))
          if [ $count -gt 15 ]; then
            echo "Timeout waiting for sqld to be ready"
            docker logs $(docker ps -q -f name=sqld) --tail 20
            exit 1
          fi
        done
        echo "sqld is ready!"
    
    # Run tests without remote integration tests first
    - name: Test (excluding remote integration)
      run: dotnet test --no-build --configuration Release --verbosity normal --filter "FullyQualifiedName!~RemoteIntegration"
    
    # Run remote integration tests separately (Linux only)
    # Note: Using port 8080 (no auth) - auth error test will be skipped
    - name: Test remote integration
      if: runner.os == 'Linux'
      env:
        LIBSQL_TEST_URL: http://localhost:8080
        LIBSQL_TEST_TOKEN: ""
      run: |
        echo "Running remote integration tests against sqld (no auth)..."
        echo "Note: Authentication error test will be skipped as the server doesn't require auth"
        dotnet test --no-build --configuration Release --verbosity normal --filter "FullyQualifiedName~RemoteIntegration"
    
    # Clean up Docker containers
    - name: Stop sqld server
      if: always() && runner.os == 'Linux'
      run: docker compose down -v