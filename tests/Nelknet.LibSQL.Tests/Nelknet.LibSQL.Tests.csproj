<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <IsPackable>false</IsPackable>
    <IsTestProject>true</IsTestProject>
    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>
    <GenerateDocumentationFile>false</GenerateDocumentationFile>
    <RuntimeIdentifiers>win-x64;win-arm64;linux-x64;linux-arm64;osx-x64;osx-arm64</RuntimeIdentifiers>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="coverlet.collector" />
    <PackageReference Include="Microsoft.NET.Test.Sdk" />
    <PackageReference Include="xunit" />
    <PackageReference Include="xunit.runner.visualstudio" />
  </ItemGroup>

  <ItemGroup>
    <Using Include="Xunit" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\..\src\Nelknet.LibSQL.Data\Nelknet.LibSQL.Data.csproj" />
  </ItemGroup>

  <!-- Workaround for CI: Copy native library to output directory root for Linux -->
  <Target Name="CopyNativeLibraryForLinux" AfterTargets="Build" Condition="'$(OS)' != 'Windows_NT' AND Exists('$(OutputPath)runtimes/linux-x64/native/libsql.so')">
    <Copy SourceFiles="$(OutputPath)runtimes/linux-x64/native/libsql.so" 
          DestinationFolder="$(OutputPath)" 
          SkipUnchangedFiles="true" />
  </Target>

  <!-- Workaround for CI: Copy native library to output directory root for macOS -->
  <Target Name="CopyNativeLibraryForMacOS" AfterTargets="Build" Condition="$([MSBuild]::IsOSPlatform('OSX')) AND Exists('$(OutputPath)runtimes/osx-arm64/native/libsql.dylib')">
    <Copy SourceFiles="$(OutputPath)runtimes/osx-arm64/native/libsql.dylib" 
          DestinationFolder="$(OutputPath)" 
          SkipUnchangedFiles="true" />
  </Target>

</Project>
